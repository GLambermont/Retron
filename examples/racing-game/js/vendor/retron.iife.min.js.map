{"version":3,"file":"retron.iife.min.js","sources":["../src/js/core/_core.js","../src/js/math/_vector2.js","../src/js/input/_input-manager.js","../src/js/loaders/_image-loader.js","../src/js/core/_constants.js","../src/js/core/_bodies.js","../src/js/objects/_game-object.js","../src/js/objects/_static-object.js","../src/js/objects/_dynamic-object.js","../src/js/objects/_physics-object.js","../src/js/particles/_sprite-particle.js","../src/js/renderer/_renderer.js","../src/js/renderer/_render-layer.js","../src/js/core/_time.js","../src/js/extras/_units.js"],"sourcesContent":["/**\n * @module core\n */\n\nimport { time } from './_time.js';\nimport { updateBodies } from './_bodies.js';\n\n// Arrays of update tasks to execute in the core update loop\nconst updateTasks = new Set;\nconst fixedUpdateTasks = new Set;\nconst lateUpdateTasks = new Set;\n\n// Core update vars\nlet coreUpdateRequestId;\nlet lastTime = 0; // Time at beginning of last core update frame.\nlet fixedTimeElapsed = 0; // Time elapsed since last fixedUpdate.\n\n/**\n * Runs all functions inside a tasks array.\n * @function runUpdateTasks\n * @param {Array.<function>} tasks - Array of update tasks\n */\nconst runUpdateTasks = tasks => tasks.forEach(task => task());\n\n/**\n * Core update function\n * @function coreUpdate\n */\nconst coreUpdate = () => {\n  time.time = Date.now();\n  time.deltaTime = time.time - lastTime;\n  lastTime = time.time;\n  fixedTimeElapsed = time.time - time.fixedTime;\n\n  // Update\n  runUpdateTasks(updateTasks);\n\n  // Fixed update\n  if (fixedTimeElapsed >= time.fixedTimeStep) {\n    time.fixedTime = time.time - (time.fixedDeltaTime % time.fixedTimeStep);\n    time.fixedDeltaTime = fixedTimeElapsed;\n\n    updateBodies();\n    runUpdateTasks(fixedUpdateTasks);\n  }\n\n  // Late update\n  runUpdateTasks(lateUpdateTasks);\n\n  coreUpdateRequestId = requestAnimationFrame(coreUpdate);\n};\n\n/**\n * Stop the core update loop.\n * @function stopCoreUpdate\n */\nconst stopCoreUpdate = () => {\n  window.cancelAnimationFrame(coreUpdateRequestId);\n};\n\nexport {\n  updateTasks,\n  fixedUpdateTasks,\n  lateUpdateTasks,\n  coreUpdate as startCoreUpdate,\n  stopCoreUpdate\n};\n","/**\n * @module vector2\n */\n\n/** Class representing a 2d vector */\nclass Vector2 {\n  /**\n   * Create a 2d vector\n   * @param {number} x X component of the vector.\n   * @param {number} y Y component of the vector.\n   * @throws Will throw an error if the x or y parameter is infinite or not numeric.\n   */\n  constructor(x, y) {\n    // If value is not numeric or finite throw an error\n    if (typeof x !== 'undefined' && typeof x !== 'object' && (isNaN(parseFloat(x)) || !isFinite(x))) {\n      throw `${x} is not a valid x value for Vector2`;\n    } else if (typeof y !== 'undefined' && (isNaN(parseFloat(y)) || !isFinite(y))) {\n      throw `${y} is not a valid y value for Vector2`;\n    }\n\n    this.set(x, y);\n  }\n\n  /**\n   * Convert paramater values to an object with an x and y component.\n   * @param {Vector2|number[]|number} x A Vector2(x, y), array[x, y] or number representing the x and y component or an number only representing the x component.\n   * @param {number} [y] number representing the y component.\n   * @returns {object} Object with an x and y component.\n   */\n  convertVectorInput(x, y) {\n    let convertedInput = {\n      x: 0,\n      y: 0,\n    }\n\n    if (Array.isArray(x)) {\n      convertedInput.x = x[0] || 0;\n      convertedInput.y = x[1] || 0;\n    } else if (x instanceof Vector2 || typeof x == 'object') {\n      convertedInput.x = x.x || 0;\n      convertedInput.y = x.y || 0;\n    } else if (typeof y === 'undefined') {\n      convertedInput.x = x;\n      convertedInput.y = x;\n    } else {\n      convertedInput.x = x;\n      convertedInput.y = y;\n    }\n\n    return convertedInput;\n  }\n\n  /**\n   * Set value of vector.\n   * @param {Vector2|number[]|number} x A Vector2(x, y), array[x, y] or number representing the x and y component or an number only representing the x component.\n   * @param {number} [y] number representing the y component.\n   */\n  set(x, y) {\n    let v = this.convertVectorInput(x, y);\n\n    this.x = v.x;\n    this.y = v.y;\n\n    return this;\n  }\n\n  /**\n   * Add a value to the x and/or y component of the vector.\n   * @param {Vector2|number[]|number} x A Vector2(x, y), array[x, y] or number representing the x and y component or an number only representing the x component.\n   * @param {number} [y] number representing the y component.\n   */\n  add(x, y) {\n    let v = this.convertVectorInput(x, y);\n\n    this.x += v.x;\n    this.y += v.y;\n\n    return this;\n  }\n\n  /**\n   * Add a value to the x and/or y component of the vector and return the resulting vector.\n   * @param {Vector2|number[]|number} x A Vector2(x, y), array[x, y] or number representing the x and y component or an number only representing the x component.\n   * @param {number} [y] Number representing the y component.\n   * @returns {Vector2}\n   */\n  returnAdd(x, y) {\n    let v = this.convertVectorInput(x, y);\n\n    return new Vector2(this.x + v.x, this.y + v.y);\n  }\n\n  /**\n   * Subtract a value from the x and/or y component of the vector.\n   * @param {Vector2|number[]|number} x A Vector2(x, y), array[x, y] or number representing the x and y component or an number only representing the x component.\n   * @param {number} [y] Number representing the y component.\n   */\n  subtract(x, y) {\n    let v = this.convertVectorInput(x, y);\n\n    this.x -= v.x;\n    this.y -= v.y;\n\n    return this;\n  }\n\n  /**\n   * Subtract a value from the x and/or y component of the vector and return the resulting vector.\n   * @param {Vector2|number[]|number} x A Vector2(x, y), array[x, y] or number representing the x and y component or an number only representing the x component.\n   * @param {number} [y] Number representing the y component.\n   * @returns {Vector2}\n   */\n  returnSubtract(x, y) {\n    let v = this.convertVectorInput(x, y);\n\n    return new Vector2(this.x - v.x, this.y - v.y);\n  }\n\n  /**\n   * Scalar multiplication of the vector.\n   * @param {number} v An number with which both the x and y component of the vector will be multiplied.\n   */\n  scale(v) {\n    this.x *= v;\n    this.y *= v;\n    \n    return this;\n  }\n\n  /**\n   * Scalar multiplication of the vector where the resulting vector will be returned.\n   * @param {number} v A number with which both the x and y component of the vector will be multiplied.\n   * @returns {Vector2}\n   */\n  returnScale(v) {\n    return new Vector2(this.x * v, this.y * v);\n  }\n\n  /**\n   * Dot product of the vector\n   * @param {Vector2|number[]|number} x - A Vector2(x, y), array[x, y] or number representing the x and y component or an number only representing the x component.\n   * @param {number} [y] Number representing the y component.\n   * @returns {number} Scalar of the dot product\n   */\n  dot(x, y) {\n    let v = this.convertVectorInput(x, y);\n\n    return (this.x * v.x) + (this.y * v.y);\n  }\n\n  /**\n   * Get the distance from the vector to a location represented by an x and y value.\n   * @param {Vector2|number[]|number} x - A Vector2(x, y), array[x, y] or number representing the x and y component or an number only representing the x component.\n   * @param {number} [y] number representing the y component.\n   * @returns {number} The distance from te vector to the set location (x, y) as an number.\n   */\n  distance(x, y) {\n    let v = this.convertVectorInput(x, y);\n\n    return Math.hypot(v.x - this.x, v.y - this.y);\n  }\n\n  /**\n   * Get the distance from the vector to a location represented by an x and y value.\n   * @param {boolean} [rad = true] Set to false to get the angle in degrees.\n   * @returns {number} Numeric value between -π and π representing the angle theta of the set (x, y).\n   */\n  direction(rad = true) {\n    if (rad) {\n      return Math.atan2(this.y, this.x);\n    } else {\n      return Math.atan2(this.y, this.x) * 180 / Math.PI;\n    }\n  }\n\n  /**\n   * Get the magnitude of the vector.\n   * @returns {Number} Magnitude of the vector.\n   */\n  magnitude() {\n    return Math.sqrt(this.x * this.x + this.y * this.y);\n  }\n\n  /**\n   * Get the squared magnitude of the vector for faster calculations.\n   * @returns {Number} Squared magnitude of the vector.\n   */\n  sqrMagnitude() {\n    return (this.x * this.x) + (this.y * this.y);\n  }\n\n  /**\n   * Set direction of the vector to an angle in degrees.\n   * @param {number} angle Angle in which to rotate the vector.\n   * @param {boolean} [rad=true] Set to false to set the angle in degrees.\n   */\n  setDirection(angle, rad = true) {\n    let magnitude = this.magnitude();\n\n    // Convert to radians to degrees if rad = false\n    if (!rad) angle *= Math.PI / 180;\n\n    this.x = Math.cos(angle) * magnitude;\n    this.y = Math.sin(angle) * magnitude;\n\n    return this;\n  }\n\n  /**\n   * Set the magnitude of the vector.\n   * @param {number} magnitude Magnitude of the vector.\n   */\n  setMagnitude(magnitude) {\n    this.x = Math.cos(this.direction()) * magnitude;\n    this.y = Math.sin(this.direction()) * magnitude;\n\n    return this;\n  }\n\n  /**\n   * Clamp the magnitude of the vector.\n   * @param {number} magnitude Magnitude above which the vector will be clamped.\n   */\n  clampMagnitude(magnitude) {\n    if (this.magnitude() >= magnitude) {\n      this.setMagnitude(magnitude);\n    }\n\n    return this;\n  }\n\n  /**\n   * Clamp the x component of the vector.\n   * @param {number} v Value above which the x component will be clamped.\n   */\n  clampX(v) {\n    if (this.x >= v) {\n      this.x = v;\n    }\n\n    return this;\n  }\n\n  /**\n   * Clamp the y component of the vector.\n   * @param {number} v Value above which the y component will be clamped.\n   */\n  clampY(v) {\n    if (this.y >= v) {\n      this.y = v;\n    }\n\n    return this;\n  }\n\n  /**\n   * Draw the vector as a line on a canvas element.\n   * @param {context} ctx Context of the canvas to draw on.\n   * @param {context} posX X position of the start of the line representing the vector.\n   * @param {context} posY Y position of the start of the line representing the vector.\n   * @param {string} [color='#00ff00'] Color of the line to draw.\n   */\n  draw(ctx, posX, posY, multiplier = 1, color = '#00ff00') {\n    ctx.beginPath();\n    ctx.moveTo(posX, posY);\n    ctx.lineTo(posX + (this.x * multiplier), posY + (this.y * multiplier));\n    ctx.strokeStyle = color;\n    ctx.stroke();\n\n    return this;\n  }\n}\n\nexport { Vector2 }\n","/**\n * @module inputManager\n */\n\n/** \n * Mapping of keys and corresponding key codes\n * @property {Object.<String, number>} keys  \n */\nconst keyMap = {\n  backspace: 8,\n  tab: 9,\n  enter: 13,\n  shift: 16,\n  ctrl: 17,\n  alt: 18,\n  pauseBreak: 19,\n  capsLock: 20,\n  esc: 27,\n  pageUp: 33,\n  pageDown: 34,\n  end: 35,\n  home: 36,\n  arrowLeft: 37,\n  arrowUp: 38,\n  arrowRight: 39,\n  arrowDown: 40,\n  printScreen: 44,\n  insert: 45,\n  delete: 46,\n  0: 48,\n  1: 49,\n  2: 50,\n  3: 51,\n  4: 52,\n  5: 53,\n  6: 54,\n  7: 55,\n  8: 56,\n  9: 57,\n  a: 65,\n  b: 66,\n  c: 67,\n  d: 68,\n  e: 69,\n  f: 70,\n  g: 71,\n  h: 72,\n  i: 73,\n  j: 74,\n  k: 75,\n  l: 76,\n  m: 77,\n  n: 78,\n  o: 79,\n  p: 80,\n  q: 81,\n  r: 82,\n  s: 83,\n  t: 84,\n  u: 85,\n  v: 86,\n  w: 87,\n  x: 88,\n  y: 89,\n  z: 90,\n  windowsLeft: 91,\n  windowsRight: 92,\n  select: 93,\n  numpad0: 96,\n  numpad0: 97,\n  numpad0: 98,\n  numpad0: 99,\n  numpad0: 100,\n  numpad0: 101,\n  numpad0: 102,\n  numpad0: 103,\n  numpad0: 104,\n  numpad0: 105,\n  multiply: 106,\n  add: 107,\n  subtract: 109,\n  decimalPoint: 110,\n  divide: 111,\n  f1: 112,\n  f2: 113,\n  f3: 114,\n  f4: 115,\n  f5: 116,\n  f6: 117,\n  f7: 118,\n  f8: 119,\n  f9: 120,\n  f10: 121,\n  f11: 122,\n  f12: 123,\n  numLock: 144,\n  scrollLock: 145,\n  semiColon: 186,\n  equal: 187,\n  comma: 188,\n  dash: 189,\n  period: 190,\n  forwardSlash: 191,\n  graveAccent: 192,\n  openBracket: 219,\n  backSlash: 220,\n  closeBracket: 221,\n  singleQuote: 222\n};\n\n/**\n * Class representing a manager for user input.\n */\nclass InputManager {\n  /**\n   * Create a new input manager.\n   * @param {bool} [preventDefault = false] Prevents default behaviour on keydown and keyup events if set to true.\n   */\n  constructor(preventDefault = false) {\n    this.preventDefault = preventDefault;\n    \n    /** \n     * Set containing pressed keys and their current state\n     * @property {Set.<number>} pressedKeys \n     * */\n    this.pressedKeys = new Set;\n\n    // Add key to pressedKeys Set on keydown event\n    document.addEventListener('keydown', e => {\n      if (this.preventDefault) e.preventDefault();\n      this.pressedKeys.add(e.keyCode); \n    }, false);\n\n    // Remove key from pressedKeys Set on keyup event\n    document.addEventListener('keyup', e => {\n      if (this.preventDefault) e.preventDefault();\n      this.pressedKeys.delete(e.keyCode);\n    }, false);\n  }\n\n  /**\n   * Convert parameter values to an object with an x and y component.\n   * @param {String|number} key - The name or key code of the key for which to check if it is pressed.\n   * @throws Will throw an error if the key does not exist in retron.inputManager.keycodes.\n   */\n  keyPressed(key) {\n    let keyCode;\n\n    // Check if key name or code is given\n    if (typeof key === 'number') {\n      keyCode = key;\n    } else if (typeof key === 'string') {\n      keyCode = keyMap[key];\n    }\n    \n    // Check for valid key value\n    if (typeof keyCode === 'undefined') {\n      throw new Error(`${key} is not a valid key value.\\nAll valid key values and corresponding key codes can be accessed from the keyMap object instance.`);\n    }\n\n    // Return true if key is pressed\n    return (this.pressedKeys.has(keyCode));\n  };\n}\n\nexport { \n  keyMap,\n  InputManager\n};\n","/**\n * @module imageLoader\n */\n\nconst loadFromPath = Symbol('Load images from path');\nconst loadFromArray = Symbol('Load images from array');\nconst loadFromObject = Symbol('Load images from object');\n\n/**\n * Class representing a loader to to convert image urls to images and return them using a promise.\n */\nclass ImageLoader {\n  /**\n   * Load images from one or multiple sources\n   * @param {Object} options Options to be used when loading the image.\n   * @param {String} options.path Image path.\n   * @param {String} [options.paths = options.paths] Image paths.\n   * @param {Object.<string, string>} options.attributes Attributes to set on the loaded image(s).\n   */\n  load(options) {\n    // Set the options.paths to the options.path value if not defined\n    if (typeof options.paths === 'undefined') options.paths = options.path;\n\n    // Check the type of path(s) given and initiate the correct loader\n    if (typeof options.paths == 'string') {\n      return this[loadFromPath](options);\n    } else if (Array.isArray(options.paths)) {\n      return this[loadFromArray](options);\n    } else if (typeof options.paths == 'object') {\n      return this[loadFromObject](options);\n    } else {\n      throw new Error('The type for the path or paths property is invalid');\n    }\n  }\n\n  /**\n   * Load images from a path to the image source.\n   * @param {Object} options Options to be used when loading the image.\n   * @param {String} options.path Image path.\n   * @param {Object.<string, string>} options.attributes Attributes to set on the loaded image.\n   * @returns {Promise.<string>} Promise object containing an image element.\n   */\n  [loadFromPath]({\n    path, \n    attributes = {}\n  }) {\n    const imageEl = new Image;\n\n    return new Promise((resolve, reject) => {\n      // Resolve when image is loaded\n      imageEl.onload = () => {\n        resolve(imageEl);\n      \n        imageEl.onload = null; // Remove event listener\n      }\n\n      // Reject if image could not be loaded\n      imageEl.onerror = () => {\n        reject(`Image could not be found and loaded from specified path: ${path}`)\n      }      \n\n      // Set image attributes if specified\n      Object.keys(attributes).map(attributeName => {\n        imageEl.setAttribute(attributeName, attributes[attributeName]);\n      });\n      \n      // Set the source of the image to the specified path\n      imageEl.src = path;\n    });\n  }\n  \n  /**\n   * Loads images from an array containing image paths.\n   * @param {Object} options Options to be used when loading the images.\n   * @param {String[]} options.paths Array of image paths.\n   * @param {Object.<string, string>} options.attributes Attributes to set on each loaded image.\n   * @param {function} options.forEach Function to execute for each image. Gets parsed the image as a parameter\n   * @returns {Promise.<Array>} Promise containing array of image elements in order of given paths.\n  */\n  [loadFromArray]({\n    paths, \n    attributes,\n    forEach = () => {}\n  }) {\n    // Execute load and forEach function for all paths and store the resulting array of promises \n    const loadPromises = paths.map(path => {      \n      return this.load({ path, attributes }).then(image => { \n        forEach(image);\n\n        return image;\n      });\n    });\n    \n    // Resolve all promises in the loadPromises array\n    return Promise.all(loadPromises);\n  }\n\n  /**\n   * Loads images from an object containing image names and paths.\n   * @param {Object} options Options to be used when loading the images.\n   * @param {Object.<string, string>} options.paths Object containing the names and paths images.\n   * @param {Object.<string, string>} options.attributes Attributes to set on each loaded image.\n   * @param {function} options.forEach Function to execute for each image. Gets parsed the image as a parameter\n   * @returns {Promise.<Object>} Promise containing image names and corresponding image elements.\n   */\n  [loadFromObject]({\n    paths, \n    attributes,\n    forEach = () => {}\n  }) {\n    // Execute loadFromPath function for all paths and store the resulting array of promises \n    const imageNames = Object.keys(paths);\n    const loadPromises = imageNames.map(imageName => {\n      return this.load({ path: paths[imageName], attributes }).then(image => {\n        forEach(image);\n\n        return image;\n      });\n    });\n    \n    // Object to return all images in\n    let returnObject = {};\n\n    // Resolve all promises in the loadPromises array and add each returned image to returnObject\n    return Promise.all(loadPromises).then(imageElements => {\n      imageElements.forEach((imageEl, i) => {\n        // Use the original name from the paths object as the key for each image\n        returnObject[imageNames[i]] = imageEl;\n      });\n\n      return returnObject;\n    });\n  }\n}\n\nexport { ImageLoader }","/**\n * @module constants\n */\n\n// Force constants\nconst forces = {\n  g: 0.5 // Gravity\n};\n\nexport { forces };\n","/**\n * @module bodies\n */\n\nimport { forces } from './_constants';\n\n// Bodies inside the engine\nconst bodies = {\n  static: [],\n  dynamic: [],\n  physics: [],\n  particle: []\n}  \n\n/**\n * Default acc > vel > pos update\n * @function updateForces\n */\nconst updateForces = (body) => {\n  // Apply forces to body\n  body.velocity.add(body.acceleration);\n  body.position.add(body.velocity);\n  body.acceleration.set(0, 0);\n}\n\n/**\n * Add a function to a task array\n * @function updateBodies\n */\nconst updateBodies = () => {\n  let i = 0; // Iterator for body update loops\n  \n  // Dynamic bodies\n  i = bodies.dynamic.length;\n  while(i--) {\n    updateForces(bodies.dynamic[i]);\n  }\n\n  // Physics bodies\n  i = bodies.physics.length\n  while(i--) {\n    bodies.physics[i].acceleration.add(0, forces.g * bodies.physics[i].mass);\n    updateForces(bodies.physics[i]);\n  }\n\n  // Particle bodies\n  i = bodies.particle.length\n  while(i--) {\n    bodies.particle[i].acceleration.add(0, forces.g * bodies[i].mass);\n    updateForces(bodies.particle[i]);\n    bodies.particle[i].mass -= bodies[i].massReduction;\n    bodies.particle[i].width -= bodies[i].scaleReduction;\n    bodies.particle[i].height -= bodies[i].scaleReduction;\n    bodies.particle[i].lifeTime -= 1;\n    bodies.particle[i].updateBounds();\n\n    if (bodies.particle[i].lifeTime <= 0 || bodies.particle[i].width <= 0 || bodies.particle[i].height <= 0) {\n      bodies.particle.splice(i, 1);\n    }\n  }\n}\n\nexport {\n  bodies,\n  updateBodies\n};\n","/**\n * @module object\n */\n\nimport { bodies } from '../core/_bodies';\nimport { Vector2 } from '../math/_vector2';\n\nclass GameObject {\n  constructor({\n    width,\n    height,\n    position = new Vector2(0),\n    rotation = 0,\n    sprite,\n    spriteFrameRate = 16,\n    spriteFrameCount = 1,\n    spriteFrameWidth = sprite.width,\n    spriteFrameHeight = sprite.height,\n    spriteOrigin = {\n      x: 0, \n      y: 0\n    },\n    type\n  }) {   \n    this.sprite = sprite;\n    this.spriteFrameWidth = spriteFrameWidth;\n    this.spriteFrameHeight = spriteFrameHeight;\n    this.spriteFrameIndex = 0;\n    this.spriteFrameRate = spriteFrameRate;\n    this.spriteFrameSkip = Math.round(60 / this.spriteFrameRate);\n    this.spriteUpdateCount = 0;\n    this.spriteFrameCount = spriteFrameCount;\n    this.spriteFramesPerRow = Math.floor(sprite.width / spriteFrameWidth);\n    this.spriteRow = 0;\n    this.spriteCol = 0;\n    this.spriteOrigin = spriteOrigin;\n    this.width = width ? width : this.spriteFrameWidth;\n    this.height = height ? height : this.spriteFrameHeight;\n    this.halfWidth = this.width / 2; // Store half of the width for faster calculations\n    this.halfHeight = this.height / 2; // Store half of the height for faster calculations\n    this.position = position;\n    this.rotation = rotation;\n\n    bodies[type].push(this);\n  }\n\n  // Get mid point\n  mid() {\n    return {\n      x: this.position.x + this.halfWidth,\n      y: this.position.y + this.halfHeight,\n    }\n  }\n\n  // Get sides of the bounding box\n  sides() {\n    return {\n      top: this.position.y,\n      bottom: this.position.y + this.width,\n      left: this.position.x,\n      right: this.position.x + this.height\n    }\n  }\n\n  // Update bounding box\n  updateBounds() {\n    this.halfWidth = this.width / 2;\n    this.halfHeight = this.height / 2;\n  }\n\n  changeSprite(sprite, spriteFrameCount) {\n    if (sprite != this.sprite) {\n      this.sprite = sprite;\n      this.spriteFrameIndex = 0;\n      this.spriteUpdateCount = 0;\n      this.spriteFramesPerRow = Math.floor(sprite.width / this.width);\n    }\n  }\n\n  updateSprite() {\n    // Update spriteFrameIndex if the spriteUpdateCount = the amount of frames to skip - 1\n    if (this.spriteUpdateCount === (Math.round(60 / this.spriteFrameRate)) - 1) {\n      this.spriteFrameIndex = (this.spriteFrameIndex + 1) % (this.spriteFrameCount - 1);\n    }\n\n    // Update spriteUpdateCount (modulo the rounded amount of frames so it's always an integer)\n    this.spriteUpdateCount = (this.spriteUpdateCount + 1) % (Math.round(60 / this.spriteFrameRate));\n\n    this.spriteRow = (this.spriteFrameIndex / this.spriteFramesPerRow) >>> 0;\n    this.spriteCol = (this.spriteFrameIndex % this.spriteFramesPerRow) >>> 0;\n  }\n\n  // Draw object\n  draw(ctx) {\n    this.updateSprite();\n\n    // Set sprite rotation\n    ctx.translate(this.position.x + this.spriteOrigin.x, this.position.y + this.spriteOrigin.y);\n    ctx.rotate(this.rotation);\n    ctx.translate(-(this.position.x + this.spriteOrigin.x), -(this.position.y + this.spriteOrigin.y));\n    \n    // Draw sprite\n    ctx.drawImage(\n      this.sprite, // Source image\n      this.spriteCol * this.spriteFrameWidth, // Source position X\n      this.spriteRow * this.spriteFrameHeight, // Source position Y\n      this.spriteFrameWidth, // Width of the object itself\n      this.spriteFrameHeight, // Height of the object itself\n      this.position.x, // Destination X\n      this.position.y, // Destination Y\n      this.width, // Source width\n      this.height, // Source height\n    );\n      \n    // Reset canvas rotation\n    ctx.resetTransform();\n  }\n}\n\nexport { GameObject };\n","/**\n * @module staticObject\n */\n\nimport { GameObject } from './_game-object';\nimport { Vector2 } from '../math/_vector2';\n\nclass StaticObject extends GameObject {\n  constructor({\n    sprite,\n    spriteFrameRate = 16,\n    spriteFrameCount = 1,\n    spriteFrameWidth = sprite.width,\n    spriteFrameHeight = sprite.height,\n    width,\n    height,\n    position = new Vector2(0),\n  }) {   \n    super({ \n      sprite,\n      spriteFrameRate,\n      spriteFrameCount,\n      spriteFrameWidth,\n      spriteFrameHeight,\n      width,\n      height,\n      position,\n      type: 'static', \n    });\n  }\n}\n\nexport { StaticObject };\n","/**\n * @module dynamicObject\n */\n\nimport { GameObject } from './_game-object';\nimport { Vector2 } from '../math/_vector2';\n\nclass DynamicObject extends GameObject {\n  constructor({\n    sprite,\n    spriteFrameRate,\n    spriteFrameCount,\n    spriteFrameWidth,\n    spriteFrameHeight,\n    spriteOrigin,\n    width,\n    height,\n    position,\n    rotation,\n    type = 'dynamic'\n  }) {\n    super({ \n      width,\n      height,\n      position,\n      rotation,\n      sprite,\n      spriteFrameRate,\n      spriteFrameCount,\n      spriteFrameWidth,\n      spriteFrameHeight,\n      spriteOrigin,\n      type, \n    });\n\n    this.velocity = new Vector2(0);\n    this.acceleration = new Vector2(0);\n  }\n}\n\nexport { DynamicObject };\n","/**\n * @module physicsObject\n */\n\nimport { DynamicObject } from './_dynamic-object';\n\nclass PhysicsObject extends DynamicObject {\n  constructor({\n    width,\n    height,\n    position,\n    rotation,\n    sprite,\n    spriteFrameRate,\n    spriteFrameCount,\n    spriteFrameWidth,\n    spriteFrameHeight,\n    spriteOrigin,\n    mass = 1,\n    type = 'physics'\n  }) {\n    super({ \n      width,\n      height,\n      position,\n      rotation,\n      sprite,\n      spriteFrameRate,\n      spriteFrameCount,\n      spriteFrameWidth,\n      spriteFrameHeight,\n      spriteOrigin,\n      type\n    });\n\n    this.mass = mass;\n  }\n}\n\nexport { PhysicsObject };\n","/**\n * @module spriteParticle\n */\n\nimport { PhysicsObject } from '../objects/_physics-object';\n\nclass SpriteParticle extends PhysicsObject {\n  constructor({\n    sprite,\n    lifeTime = 100,\n    massReduction = 0.1,\n    scaleReduction = 0.1,\n    type = 'particle'\n  }) {\n    super({ sprite, type });\n    this.lifeTime = lifeTime;\n    this.massReduction = massReduction;\n    this.scaleReduction = scaleReduction;\n  }\n\n  // Draw particle from center\n  draw(ctx) {\n    ctx.drawImage(this.sprite, this.position.x - this.halfWidth, this.position.y - this.halfHeight, this.width, this.height);\n  }\n}\n\nexport { SpriteParticle };\n","/**\n * @module renderer\n */\n\n/**\n * Class representing a renderer containing render layers\n */\nclass Renderer {\n  /**\n   * Create a render group for an array of layers.\n   * @param {object} properties\n   * @param {number} properties.width Width of the render group element.\n   * @param {number} properties.height Height of the render group element.\n   * @param {RenderLayer[]} properties.layers = Array of RenderLayer instances to append to the render group.\n   * @param {string} properties.className Class name of the render group element.\n   */\n  constructor({ width = 640, height = 360, layers = {}, className = '' } = {}) {\n    this.width = width;\n    this.height = height;\n    this.element = document.createElement('div');\n    this.element.className = `retron-renderer ${className}`;\n    this.layers = layers;\n\n    // Append render layers    \n    Object.values(this.layers).forEach((layer, i) => {\n      layer.canvas.style.zIndex = i; // Set the z-index to stack layers\n      this.element.appendChild(layer.canvas);\n    });\n\n    // Set the initial scale of the renderer\n    this.setSize(width, height);\n  }\n\n  /**\n   * Set the size of the renderer element and it's children.\n   * @param {number} width Width of the renderer.\n   * @param {number} height Height of the renderer.\n   */\n  setSize(width, height) {\n    // Store new width and height\n    this.width = width;\n    this.height = height;\n\n    // Scale group element\n    this.element.style.width = `${Math.floor(width)}px`;\n    this.element.style.height = `${Math.floor(height)}px`;\n\n    // Scale layers to size of render group\n    Object.values(this.layers).forEach((layer, i) => {\n      layer.setSize(width, height);\n    });\n  }\n};\n\nexport { Renderer };\n","/**\n * @module renderLayer\n */\n\n/**\n * Class representing a render layer to be used inside a renderGroup.\n */\nclass RenderLayer {\n  /**z\n   * Create a render layer.\n   * @param {object} properties\n   * @param {string} properties.className Class name of the render layer canvas.\n   * @param {bool} properties.clearFullFrame Clear entire canvas every draw call.\n   * @param {string} [properties.ctx = '2d'] Context used for rendering\n   */\n  constructor({ className = '', clearFullFrame = true, ctx = '2d' } = {}) {\n    this.canvas = document.createElement('canvas');\n    this.canvas.className = `retron-render-layer ${className}`; // Set class for DOM element\n    this.ctx = this.canvas.getContext(ctx);\n    this.clearFullFrame = clearFullFrame;\n  }\n\n  /**\n   * Set the size of the layer.\n   * @param {number} width Width of the layer.\n   * @param {number} height Height of the layer.\n   */\n  setSize(width, height) {\n    this.canvas.width = width;\n    this.canvas.height = height;\n  }\n\n  /**\n   * Execute the tasks function and parse it the render layer it's context.\n   * @param {function} tasks Tasks to execute when the function is called.\n   */\n  render(tasks) {\n    // Clear the whole canvas is clearFulFrame is set to true\n    if (this.clearFullFrame) {\n      this.ctx.clearRect(0, 0, this.canvas.width, this.canvas.height);\n    }\n\n    tasks(this.ctx);\n  }\n};\n\nexport { RenderLayer };\n","/**\n * @module time\n */\n\n/**\n * @property {number}  timeScale The scale at which the time is passing.\n * @property {number}  fixedTimeStep Fixed update frame duration in ms.\n * @property {number}  time Time at the beginning of the current core update frame.\n * @property {number}  fixedTime Time at the beginning of the current fixed update frame.\n * @property {number}  deltaTime Time between the last two core update frames.\n * @property {number}  fixedDeltaTime Time between the last two fixed update frames.\n */\nconst time = {\n  timeScale: 1,\n  fixedTimeStep: 1000 / 30,\n  time: 0,\n  fixedTime: 0,\n  deltaTime: 0,\n  fixedDeltaTime: 0,\n}\n\nexport { time };\n","/**\n * @module units\n */\n\n/**\n * Convert viewport width value to pixel value. 1vw = 1/10 of the viewport width.\n * vw(0) = 0% viewport width.\n * vw(100) = 100% viewport width.\n * @function vw\n * @param {number} width Width in viewport units (0 - 100).\n * @returns {number} Width in pixels.\n */\nconst vw = (width) => { return window.innerWidth * width / 100 };\n\n/**\n * Convert viewport height value to pixel value. 1vh = 1/10 of the viewport height.\n * vh(0) = 0% viewport height.\n * vh(100) = 100% viewport height.\n * @function vh\n * @param {number} height Height in viewport units (0 - 100).\n * @returns {number} Height in pixels.\n */\nconst vh = (height) => { return window.innerHeight * height / 100 };\n\n/**\n * Convert canvas width value to pixel value. 1cw = 1/10 of the canvas width.\n * cw(0) = 0% canvas width.\n * cw(100) = 100% canvas width.\n * @function cw\n * @param {HTMLElement} canvas Canvas element with which to calculate pixel width;\n * @param {number} width Height in canvas units (0 - 100).\n * @returns {number} Width in pixels.\n */\nconst cw = (canvas, width) => { return canvas.width * width / 100 };\n\n/**\n * Convert canvas height value to pixel value. 1cw = 1/10 of the canvas height.\n * ch(0) = 0% canvas width.\n * ch(100) = 100% canvas height.\n * @function ch\n * @param {HTMLElementt} canvas Canvas element with which to calculate pixel height;\n * @param {number} height Height in canvas units (0 - 100).\n * @returns {number} Height in pixels.\n */\nconst ch = (canvas, height) => { return canvas.height * height / 100 };\n\nexport {\n  vw,\n  vh,\n  cw,\n  ch\n};\n"],"names":["coreUpdateRequestId","Vector2","x","y","_typeof","isNaN","parseFloat","isFinite","set","convertedInput","Array","isArray","v","this","convertVectorInput","Math","hypot","atan2","PI","sqrt","angle","rad","magnitude","cos","sin","direction","setMagnitude","ctx","posX","posY","multiplier","color","beginPath","moveTo","lineTo","strokeStyle","stroke","keyMap","backspace","tab","enter","shift","ctrl","alt","pauseBreak","capsLock","esc","pageUp","pageDown","end","home","arrowLeft","arrowUp","arrowRight","arrowDown","printScreen","insert","delete","a","b","c","d","e","f","g","h","i","j","k","l","m","n","o","p","q","r","s","t","u","w","z","windowsLeft","windowsRight","select","numpad0","InputManager","preventDefault","pressedKeys","Set","document","addEventListener","_this","add","keyCode","key","Error","has","loadFromPath","Symbol","loadFromArray","loadFromObject","ImageLoader","options","paths","path","attributes","imageEl","Image","Promise","resolve","reject","onload","onerror","Object","keys","map","attributeName","setAttribute","src","forEach","loadPromises","load","then","image","all","imageNames","imageName","_this2","returnObject","imageElements","forces","bodies","static","dynamic","physics","particle","updateForces","body","velocity","acceleration","position","GameObject","width","height","rotation","sprite","spriteFrameRate","spriteFrameCount","spriteFrameWidth","spriteFrameHeight","spriteOrigin","type","spriteFrameIndex","spriteFrameSkip","round","spriteUpdateCount","spriteFramesPerRow","floor","spriteRow","spriteCol","halfWidth","halfHeight","push","top","bottom","left","right","updateSprite","translate","rotate","drawImage","resetTransform","StaticObject","DynamicObject","PhysicsObject","mass","SpriteParticle","lifeTime","massReduction","scaleReduction","Renderer","layers","className","element","createElement","values","layer","canvas","style","zIndex","appendChild","setSize","RenderLayer","clearFullFrame","getContext","tasks","clearRect","time","timeScale","fixedTimeStep","fixedTime","deltaTime","fixedDeltaTime","updateTasks","fixedUpdateTasks","lateUpdateTasks","lastTime","fixedTimeElapsed","runUpdateTasks","task","window","innerWidth","innerHeight","coreUpdate","Date","now","length","updateBounds","splice","updateBodies","requestAnimationFrame","cancelAnimationFrame"],"mappings":"6qDAaIA,ECREC,wBAOQC,EAAGC,qBAEI,IAAND,GAAkC,WAAbE,EAAOF,KAAmBG,MAAMC,WAAWJ,MAAQK,SAASL,mBACjFA,yCACJ,QAAiB,IAANC,IAAsBE,MAAMC,WAAWH,MAAQI,SAASJ,mBAC/DA,8CAGNK,IAAIN,EAAGC,wDASKD,EAAGC,OAChBM,EAAiB,CACnBP,EAAG,EACHC,EAAG,UAGDO,MAAMC,QAAQT,IAChBO,EAAeP,EAAIA,EAAE,IAAM,EAC3BO,EAAeN,EAAID,EAAE,IAAM,GAClBA,aAAaD,GAAuB,UAAZG,EAAOF,IACxCO,EAAeP,EAAIA,EAAEA,GAAK,EAC1BO,EAAeN,EAAID,EAAEC,GAAK,QACJ,IAANA,GAChBM,EAAeP,EAAIA,EACnBO,EAAeN,EAAID,IAEnBO,EAAeP,EAAIA,EACnBO,EAAeN,EAAIA,GAGdM,8BAQLP,EAAGC,OACDS,EAAIC,KAAKC,mBAAmBZ,EAAGC,eAE9BD,EAAIU,EAAEV,OACNC,EAAIS,EAAET,EAEJU,iCAQLX,EAAGC,OACDS,EAAIC,KAAKC,mBAAmBZ,EAAGC,eAE9BD,GAAKU,EAAEV,OACPC,GAAKS,EAAET,EAELU,uCASCX,EAAGC,OACPS,EAAIC,KAAKC,mBAAmBZ,EAAGC,UAE5B,IAAIF,EAAQY,KAAKX,EAAIU,EAAEV,EAAGW,KAAKV,EAAIS,EAAET,oCAQrCD,EAAGC,OACNS,EAAIC,KAAKC,mBAAmBZ,EAAGC,eAE9BD,GAAKU,EAAEV,OACPC,GAAKS,EAAET,EAELU,4CASMX,EAAGC,OACZS,EAAIC,KAAKC,mBAAmBZ,EAAGC,UAE5B,IAAIF,EAAQY,KAAKX,EAAIU,EAAEV,EAAGW,KAAKV,EAAIS,EAAET,iCAOxCS,eACCV,GAAKU,OACLT,GAAKS,EAEHC,yCAQGD,UACH,IAAIX,EAAQY,KAAKX,EAAIU,EAAGC,KAAKV,EAAIS,+BAStCV,EAAGC,OACDS,EAAIC,KAAKC,mBAAmBZ,EAAGC,UAE3BU,KAAKX,EAAIU,EAAEV,EAAMW,KAAKV,EAAIS,EAAET,mCAS7BD,EAAGC,OACNS,EAAIC,KAAKC,mBAAmBZ,EAAGC,UAE5BY,KAAKC,MAAMJ,EAAEV,EAAIW,KAAKX,EAAGU,EAAET,EAAIU,KAAKV,wGAUlCY,KAAKE,MAAMJ,KAAKV,EAAGU,KAAKX,GAEK,IAA7Ba,KAAKE,MAAMJ,KAAKV,EAAGU,KAAKX,GAAWa,KAAKG,8CAS1CH,KAAKI,KAAKN,KAAKX,EAAIW,KAAKX,EAAIW,KAAKV,EAAIU,KAAKV,iDAQzCU,KAAKX,EAAIW,KAAKX,EAAMW,KAAKV,EAAIU,KAAKV,uCAQ/BiB,OAAOC,6DACdC,EAAYT,KAAKS,mBAGhBD,IAAKD,GAASL,KAAKG,GAAK,UAExBhB,EAAIa,KAAKQ,IAAIH,GAASE,OACtBnB,EAAIY,KAAKS,IAAIJ,GAASE,EAEpBT,0CAOIS,eACNpB,EAAIa,KAAKQ,IAAIV,KAAKY,aAAeH,OACjCnB,EAAIY,KAAKS,IAAIX,KAAKY,aAAeH,EAE/BT,4CAOMS,UACTT,KAAKS,aAAeA,QACjBI,aAAaJ,GAGbT,oCAOFD,UACDC,KAAKX,GAAKU,SACPV,EAAIU,GAGJC,oCAOFD,UACDC,KAAKV,GAAKS,SACPT,EAAIS,GAGJC,kCAUJc,EAAKC,EAAMC,OAAMC,yDAAa,EAAGC,yDAAQ,iBAC5CJ,EAAIK,YACJL,EAAIM,OAAOL,EAAMC,GACjBF,EAAIO,OAAON,EAAQf,KAAKX,EAAI4B,EAAaD,EAAQhB,KAAKV,EAAI2B,GAC1DH,EAAIQ,YAAcJ,EAClBJ,EAAIS,SAEGvB,cCrQLwB,QACJC,UAAW,EACXC,IAAK,EACLC,MAAO,GACPC,MAAO,GACPC,KAAM,GACNC,IAAK,GACLC,WAAY,GACZC,SAAU,GACVC,IAAK,GACLC,OAAQ,GACRC,SAAU,GACVC,IAAK,GACLC,KAAM,GACNC,UAAW,GACXC,QAAS,GACTC,WAAY,GACZC,UAAW,GACXC,YAAa,GACbC,OAAQ,GACRC,OAAQ,KACL,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,GACHC,EAAG,GACHC,EAAG,GACHC,EAAG,GACHC,EAAG,GACHC,EAAG,GACHC,EAAG,GACHC,EAAG,GACHC,EAAG,GACHC,EAAG,GACHC,EAAG,GACHC,EAAG,GACHC,EAAG,GACHC,EAAG,GACHC,EAAG,GACHC,EAAG,GACHC,EAAG,GACHC,EAAG,GACHC,EAAG,GACHC,EAAG,GACHC,EAAG,GACHC,EAAG,GACHlE,EAAG,GACHmE,EAAG,GACH7E,EAAG,GACHC,EAAG,GACH6E,EAAG,GACHC,YAAa,GACbC,aAAc,GACdC,OAAQ,GACRC,QAAS,cACA,kBACA,kBACA,kBACA,mBACA,mBACA,mBACA,mBACA,mBACA,oBACC,eACL,oBACK,wBACI,kBACN,cACJ,cACA,cACA,cACA,cACA,cACA,cACA,cACA,cACA,eACC,eACA,eACA,mBACI,sBACG,qBACD,iBACJ,iBACA,gBACD,kBACE,wBACM,uBACD,uBACA,qBACF,wBACG,uBACD,QAMTC,qCAKQC,yEACLA,eAAiBA,OAMjBC,YAAc,IAAIC,IAGvBC,SAASC,iBAAiB,UAAW,SAAA5B,GAC/B6B,EAAKL,gBAAgBxB,EAAEwB,iBAC3BK,EAAKJ,YAAYK,IAAI9B,EAAE+B,WACtB,GAGHJ,SAASC,iBAAiB,QAAS,SAAA5B,GAC7B6B,EAAKL,gBAAgBxB,EAAEwB,iBAC3BK,EAAKJ,YAAY9B,OAAOK,EAAE+B,WACzB,gDAQMC,OACLD,KAGe,iBAARC,EACTD,EAAUC,EACc,iBAARA,IAChBD,EAAUxD,EAAOyD,SAII,IAAZD,QACH,IAAIE,gBAASD,2IAIbjF,KAAK0E,YAAYS,IAAIH,YC7J3BI,EAAeC,OAAO,yBACtBC,EAAgBD,OAAO,0BACvBE,EAAiBF,OAAO,2BAKxBG,2EAQCC,WAE0B,IAAlBA,EAAQC,QAAuBD,EAAQC,MAAQD,EAAQE,MAGtC,iBAAjBF,EAAQC,aACV1F,KAAKoF,GAAcK,GACrB,GAAI5F,MAAMC,QAAQ2F,EAAQC,cACxB1F,KAAKsF,GAAeG,GACtB,GAA4B,UAAxBlG,EAAOkG,EAAQC,cACjB1F,KAAKuF,GAAgBE,SAEtB,IAAIP,MAAM,6DAWnBE,wBACCO,IAAAA,SACAC,WAAAA,aAAa,KAEPC,EAAU,IAAIC,aAEb,IAAIC,QAAQ,SAACC,EAASC,GAE3BJ,EAAQK,OAAS,WACfF,EAAQH,GAERA,EAAQK,OAAS,MAInBL,EAAQM,QAAU,WAChBF,qEAAmEN,KAIrES,OAAOC,KAAKT,GAAYU,IAAI,SAAAC,GAC1BV,EAAQW,aAAaD,EAAeX,EAAWW,MAIjDV,EAAQY,IAAMd,WAYjBL,+BACCI,IAAAA,MACAE,IAAAA,eACAc,QAAAA,aAAU,eAGJC,EAAejB,EAAMY,IAAI,SAAAX,UACtBb,EAAK8B,KAAK,CAAEjB,KAAAA,EAAMC,WAAAA,IAAciB,KAAK,SAAAC,UAC1CJ,EAAQI,GAEDA,aAKJf,QAAQgB,IAAIJ,UAWpBpB,+BACCG,IAAAA,MACAE,IAAAA,eACAc,QAAAA,aAAU,eAGJM,EAAaZ,OAAOC,KAAKX,GACzBiB,EAAeK,EAAWV,IAAI,SAAAW,UAC3BC,EAAKN,KAAK,CAAEjB,KAAMD,EAAMuB,GAAYrB,WAAAA,IAAciB,KAAK,SAAAC,UAC5DJ,EAAQI,GAEDA,MAKPK,EAAe,UAGZpB,QAAQgB,IAAIJ,GAAcE,KAAK,SAAAO,UACpCA,EAAcV,QAAQ,SAACb,EAASxC,GAE9B8D,EAAaH,EAAW3D,IAAMwC,IAGzBsB,aC7HPE,EAAS,CACblE,EAAG,gCCCCmE,EAAS,CACbC,OAAQ,GACRC,QAAS,GACTC,QAAS,GACTC,SAAU,IAONC,EAAe,SAACC,GAEpBA,EAAKC,SAAS9C,IAAI6C,EAAKE,cACvBF,EAAKG,SAAShD,IAAI6C,EAAKC,UACvBD,EAAKE,aAAanI,IAAI,EAAG,ICfrBqI,+BAEFC,IAAAA,MACAC,IAAAA,WACAH,SAAAA,aAAW,IAAI3I,EAAQ,SACvB+I,SAAAA,aAAW,IACXC,IAAAA,WACAC,gBAAAA,aAAkB,SAClBC,iBAAAA,aAAmB,QACnBC,iBAAAA,aAAmBH,EAAOH,YAC1BO,kBAAAA,aAAoBJ,EAAOF,aAC3BO,aAAAA,aAAe,CACbpJ,EAAG,EACHC,EAAG,KAELoJ,IAAAA,oBAEKN,OAASA,OACTG,iBAAmBA,OACnBC,kBAAoBA,OACpBG,iBAAmB,OACnBN,gBAAkBA,OAClBO,gBAAkB1I,KAAK2I,MAAM,GAAK7I,KAAKqI,sBACvCS,kBAAoB,OACpBR,iBAAmBA,OACnBS,mBAAqB7I,KAAK8I,MAAMZ,EAAOH,MAAQM,QAC/CU,UAAY,OACZC,UAAY,OACZT,aAAeA,OACfR,MAAQA,GAAgBjI,KAAKuI,sBAC7BL,OAASA,GAAkBlI,KAAKwI,uBAChCW,UAAYnJ,KAAKiI,MAAQ,OACzBmB,WAAapJ,KAAKkI,OAAS,OAC3BH,SAAWA,OACXI,SAAWA,EAEhBb,EAAOoB,GAAMW,KAAKrJ,oDAKX,CACLX,EAAGW,KAAK+H,SAAS1I,EAAIW,KAAKmJ,UAC1B7J,EAAGU,KAAK+H,SAASzI,EAAIU,KAAKoJ,kDAMrB,CACLE,IAAKtJ,KAAK+H,SAASzI,EACnBiK,OAAQvJ,KAAK+H,SAASzI,EAAIU,KAAKiI,MAC/BuB,KAAMxJ,KAAK+H,SAAS1I,EACpBoK,MAAOzJ,KAAK+H,SAAS1I,EAAIW,KAAKkI,oDAM3BiB,UAAYnJ,KAAKiI,MAAQ,OACzBmB,WAAapJ,KAAKkI,OAAS,uCAGrBE,EAAQE,GACfF,GAAUpI,KAAKoI,cACZA,OAASA,OACTO,iBAAmB,OACnBG,kBAAoB,OACpBC,mBAAqB7I,KAAK8I,MAAMZ,EAAOH,MAAQjI,KAAKiI,+CAMvDjI,KAAK8I,oBAAuB5I,KAAK2I,MAAM,GAAK7I,KAAKqI,iBAAoB,SAClEM,kBAAoB3I,KAAK2I,iBAAmB,IAAM3I,KAAKsI,iBAAmB,SAI5EQ,mBAAqB9I,KAAK8I,kBAAoB,GAAM5I,KAAK2I,MAAM,GAAK7I,KAAKqI,sBAEzEY,UAAajJ,KAAK2I,iBAAmB3I,KAAK+I,qBAAwB,OAClEG,UAAalJ,KAAK2I,iBAAmB3I,KAAK+I,qBAAwB,+BAIpEjI,QACE4I,eAGL5I,EAAI6I,UAAU3J,KAAK+H,SAAS1I,EAAIW,KAAKyI,aAAapJ,EAAGW,KAAK+H,SAASzI,EAAIU,KAAKyI,aAAanJ,GACzFwB,EAAI8I,OAAO5J,KAAKmI,UAChBrH,EAAI6I,YAAY3J,KAAK+H,SAAS1I,EAAIW,KAAKyI,aAAapJ,KAAMW,KAAK+H,SAASzI,EAAIU,KAAKyI,aAAanJ,IAG9FwB,EAAI+I,UACF7J,KAAKoI,YACAc,UAAYlJ,KAAKuI,sBACjBU,UAAYjJ,KAAKwI,uBACjBD,sBACAC,uBACAT,SAAS1I,OACT0I,SAASzI,OACT2I,WACAC,QAIPpH,EAAIgJ,0BC5GFC,gCAEF3B,IAAAA,WACAC,gBAAAA,aAAkB,SAClBC,iBAAAA,aAAmB,QACnBC,iBAAAA,aAAmBH,EAAOH,YAC1BO,kBAAAA,aAAoBJ,EAAOF,SAC3BD,IAAAA,MACAC,IAAAA,WACAH,SAAAA,aAAW,IAAI3I,EAAQ,4CAEjB,CACJgJ,OAAAA,EACAC,gBAAAA,EACAC,iBAAAA,EACAC,iBAAAA,EACAC,kBAAAA,EACAP,MAAAA,EACAC,OAAAA,EACAH,SAAAA,EACAW,KAAM,uBApBeV,QCArBgC,kCAEF5B,IAAAA,OACAC,IAAAA,gBACAC,IAAAA,iBACAC,IAAAA,iBACAC,IAAAA,kBACAC,IAAAA,aACAR,IAAAA,MACAC,IAAAA,OACAH,IAAAA,SACAI,IAAAA,aACAO,KAAAA,aAAO,sDAED,CACJT,MAAAA,EACAC,OAAAA,EACAH,SAAAA,EACAI,SAAAA,EACAC,OAAAA,EACAC,gBAAAA,EACAC,iBAAAA,EACAC,iBAAAA,EACAC,kBAAAA,EACAC,aAAAA,EACAC,KAAAA,MAGGb,SAAW,IAAIzI,EAAQ,KACvB0I,aAAe,IAAI1I,EAAQ,gBA7BR4I,QCDtBiC,kCAEFhC,IAAAA,MACAC,IAAAA,OACAH,IAAAA,SACAI,IAAAA,SACAC,IAAAA,OACAC,IAAAA,gBACAC,IAAAA,iBACAC,IAAAA,iBACAC,IAAAA,kBACAC,IAAAA,iBACAyB,KAAAA,aAAO,QACPxB,KAAAA,aAAO,sDAED,CACJT,MAAAA,EACAC,OAAAA,EACAH,SAAAA,EACAI,SAAAA,EACAC,OAAAA,EACAC,gBAAAA,EACAC,iBAAAA,EACAC,iBAAAA,EACAC,kBAAAA,EACAC,aAAAA,EACAC,KAAAA,MAGGwB,KAAOA,eA7BYF,QCAtBG,kCAEF/B,IAAAA,WACAgC,SAAAA,aAAW,UACXC,cAAAA,aAAgB,SAChBC,eAAAA,aAAiB,SACjB5B,KAAAA,aAAO,uDAED,CAAEN,OAAAA,EAAQM,KAAAA,MACX0B,SAAWA,IACXC,cAAgBA,IAChBC,eAAiBA,eAXGL,mCAetBnJ,GACHA,EAAI+I,UAAU7J,KAAKoI,OAAQpI,KAAK+H,SAAS1I,EAAIW,KAAKmJ,UAAWnJ,KAAK+H,SAASzI,EAAIU,KAAKoJ,WAAYpJ,KAAKiI,MAAOjI,KAAKkI,iBCf/GqC,8FASqE,OAA3DtC,MAAAA,aAAQ,UAAKC,OAAAA,aAAS,UAAKsC,OAAAA,aAAS,SAAIC,UAAAA,aAAY,oBAC3DxC,MAAQA,OACRC,OAASA,OACTwC,QAAU9F,SAAS+F,cAAc,YACjCD,QAAQD,oCAA+BA,QACvCD,OAASA,EAGdpE,OAAOwE,OAAO5K,KAAKwK,QAAQ9D,QAAQ,SAACmE,EAAOxH,GACzCwH,EAAMC,OAAOC,MAAMC,OAAS3H,EAC5ByB,EAAK4F,QAAQO,YAAYJ,EAAMC,eAI5BI,QAAQjD,EAAOC,6CAQdD,EAAOC,QAERD,MAAQA,OACRC,OAASA,OAGTwC,QAAQK,MAAM9C,gBAAW/H,KAAK8I,MAAMf,cACpCyC,QAAQK,MAAM7C,iBAAYhI,KAAK8I,MAAMd,SAG1C9B,OAAOwE,OAAO5K,KAAKwK,QAAQ9D,QAAQ,SAACmE,EAAOxH,GACzCwH,EAAMK,QAAQjD,EAAOC,cC1CrBiD,uFAQgE,OAAtDV,UAAAA,aAAY,SAAIW,eAAAA,oBAAuBtK,IAAAA,aAAM,sBACpDgK,OAASlG,SAAS+F,cAAc,eAChCG,OAAOL,wCAAmCA,QAC1C3J,IAAMd,KAAK8K,OAAOO,WAAWvK,QAC7BsK,eAAiBA,4CAQhBnD,EAAOC,QACR4C,OAAO7C,MAAQA,OACf6C,OAAO5C,OAASA,iCAOhBoD,GAEDtL,KAAKoL,qBACFtK,IAAIyK,UAAU,EAAG,EAAGvL,KAAK8K,OAAO7C,MAAOjI,KAAK8K,OAAO5C,QAG1DoD,EAAMtL,KAAKc,cC9BT0K,EAAO,CACXC,UAAW,EACXC,cAAe,IAAO,GACtBF,KAAM,EACNG,UAAW,EACXC,UAAW,EACXC,eAAgB,GbVZC,EAAc,IAAInH,IAClBoH,EAAmB,IAAIpH,IACvBqH,EAAkB,IAAIrH,IAIxBsH,EAAW,EACXC,EAAmB,EAOjBC,EAAiB,SAAAb,UAASA,EAAM5E,QAAQ,SAAA0F,UAAQA,kNcV3C,SAACnE,UAAmBoE,OAAOC,WAAarE,EAAQ,UAUhD,SAACC,UAAoBmE,OAAOE,YAAcrE,EAAS,UAWnD,SAAC4C,EAAQ7C,UAAmB6C,EAAO7C,MAAQA,EAAQ,UAWnD,SAAC6C,EAAQ5C,UAAoB4C,EAAO5C,OAASA,EAAS,gFdhB9C,SAAbsE,IACJhB,EAAKA,KAAOiB,KAAKC,MACjBlB,EAAKI,UAAYJ,EAAKA,KAAOS,EAC7BA,EAAWT,EAAKA,KAChBU,EAAmBV,EAAKA,KAAOA,EAAKG,UAGpCQ,EAAeL,GAGXI,GAAoBV,EAAKE,gBAC3BF,EAAKG,UAAYH,EAAKA,KAAQA,EAAKK,eAAiBL,EAAKE,cACzDF,EAAKK,eAAiBK,EKXL,eACf7I,EAAI,MAGRA,EAAIiE,EAAOE,QAAQmF,OACbtJ,KACJsE,EAAaL,EAAOE,QAAQnE,QAI9BA,EAAIiE,EAAOG,QAAQkF,OACbtJ,KACJiE,EAAOG,QAAQpE,GAAGyE,aAAa/C,IAAI,EAAGsC,EAAOlE,EAAImE,EAAOG,QAAQpE,GAAG6G,MACnEvC,EAAaL,EAAOG,QAAQpE,QAI9BA,EAAIiE,EAAOI,SAASiF,OACdtJ,KACJiE,EAAOI,SAASrE,GAAGyE,aAAa/C,IAAI,EAAGsC,EAAOlE,EAAImE,EAAOjE,GAAG6G,MAC5DvC,EAAaL,EAAOI,SAASrE,IAC7BiE,EAAOI,SAASrE,GAAG6G,MAAQ5C,EAAOjE,GAAGgH,cACrC/C,EAAOI,SAASrE,GAAG4E,OAASX,EAAOjE,GAAGiH,eACtChD,EAAOI,SAASrE,GAAG6E,QAAUZ,EAAOjE,GAAGiH,eACvChD,EAAOI,SAASrE,GAAG+G,UAAY,EAC/B9C,EAAOI,SAASrE,GAAGuJ,gBAEftF,EAAOI,SAASrE,GAAG+G,UAAY,GAAK9C,EAAOI,SAASrE,GAAG4E,OAAS,GAAKX,EAAOI,SAASrE,GAAG6E,QAAU,IACpGZ,EAAOI,SAASmF,OAAOxJ,EAAG,GLf5ByJ,GACAX,EAAeJ,IAIjBI,EAAeH,GAEf7M,EAAsB4N,sBAAsBP,qBAOvB,WACrBH,OAAOW,qBAAqB7N"}